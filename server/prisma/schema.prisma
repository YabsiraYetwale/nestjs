generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  roles           UserRole[]
  permissions     UserPermission[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  token           RefreshToken[]
  companies       CompanyUser[] @relation("userCompanies")
  invoices   Invoices[]  @relation("userInvoices")
}



model RefreshToken {
  id            String    @id @default(cuid())
  token         String    @unique
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
} 

model Role{
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         UserRole[]
  permissions   Permission[]
}





model UserRole{
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role      Role      @relation( fields: [roleId], references: [id], onDelete: Cascade)
  roleId String
}




model Permission{

  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  action String @unique 
  users     UserPermission[]    
  role      Role ?     @relation( fields: [roleId], references: [id], onDelete: Cascade)
  roleId String ?
}


model UserPermission{
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role      Permission      @relation( fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String
}

model Company {
  id                   String     @id @default(uuid())
  company_logo         String?
  name                 String     @unique
  general_manager_name String
  company_number       String     @unique
  vat_reg_number       String     @unique
  house_no             String     @unique
  po_box               String     @unique
  fax                  String     @unique
  email                String     @unique
  tel1                 String?    @unique
  tel2                 String?    @unique
  country              String
  region               String
  city                 String
  subcity              String
  woreda               String
  kebele               String
  description          String?
  users                CompanyUser[] @relation("userCompanies")
  documents            Document[] @relation("documentcompany")
  invoices             Invoices[]   @relation("companyInvoices")
  additional_fields      AdditionalFieldS[]   @relation("additional_field_Company")

}

model CompanyUser {
  createdAt DateTime @default(now())
  userId    String
  companyId String
  user      User   @relation("userCompanies", fields: [userId], references: [id])
  company   Company @relation("userCompanies", fields: [companyId], references: [id])

  @@id([userId,companyId])
}

model Document {
  id         String   @id @default(uuid())
  file_name  String
  file_path  String
  company_id String?
  company    Company? @relation("documentcompany", fields: [company_id], references: [id], onDelete: Cascade)
}

model Clients {
  id               String     @id @default(uuid())
  name             String
  billing_address  String
  shipping_address String
  shipping_city    String
  shipping_state   String
  shipping_zip     String
  shipping_country String
  contact_person   String
  email            String     @unique
  phone            String
  invoices         Invoices[] @relation("clientInvoices")
}

enum TemplateVersion {
  v1 @map("v1")
  v2 @map("v2")
  v3 @map("v3")
  v4 @map("v4")
  v5 @map("v5")
}

model Invoices {
  id             String       @id @default(uuid())
  invoice_number String       @unique
  date           DateTime     @default(now())
  due_date       String
  total_amount   Decimal?     @db.Decimal(10, 2)
  status         String?      @default("unpaid")
  isRead         Boolean?     @default(false)
  client_id      String?
  client         Clients?     @relation("clientInvoices", fields: [client_id], references: [email], onDelete: Cascade)
  line_items     Line_Items[] @relation("invoiceLineItems")
  creator_id     String? 
  creator        User? @relation("userInvoices", fields: [creator_id], references: [id], onDelete: Cascade)
  company_id     String?
  company        Company?   @relation("companyInvoices", fields: [company_id], references: [id], onDelete: Cascade)
  templateVersion TemplateVersion?   @default(v1)
}

model Line_Items {
  id          String    @id @default(uuid())
  description String
  quantity    Int
  unit_price  Decimal   @db.Decimal(10, 2)
  tax_rate    Decimal   @db.Decimal(5, 2)
  invoice_id  String?
  invoice     Invoices? @relation("invoiceLineItems", fields: [invoice_id], references: [id], onDelete: Cascade)
}

model customFieds {
  id          String    @id @default(uuid())
  fields Json?
}

model AdditionalFieldS {
  id       String       @id @default(uuid())
  additional_fields      Json?
  position       String? 
  company_id     String? 
  company       Company?   @relation("additional_field_Company", fields: [company_id], references: [id], onDelete: Cascade)
  
}
